# 1. NoSQL 简介

## 1. 技术的分类

1. 解决功能性的问题

Java、Servlet、Jsp、Tomcat、JDBC、Linux、Svn 等

1. 解决扩展性的问题

Spring、 SpringMVC、SpringBoot、Hibernate、MyBatis等

1. 解决性能的问题

NoSQL、Java多线程、Nginx、MQ、ElasticSearch、Hadoop等







## 2. WEB1.0 及 WEB2.0

1. Web1.0的时代,数据访问量很有限，用一夫当关的高性能的单节点服务器可以解决大部分问题。
2. Web2.0时代的到来，用户访问量大幅度提升，同时产生了大量的用户数据，加上后来的智能移动设备的普及，所有的互联网平台都面临了巨大的性能挑战。

  





## 3. 解决服务器 CPU 内存压力 

![image.png](../../imgs/1576400383650-04cc1dbf-e54f-4b5f-9981-583d426deff1.png)



**思考：Session 共享问题如何解决？**

方案一：存在 Cookie 中，此种方案需要将 Session 数据以 Cookie 的形式存储在客户端中，不安全，网络负担效率低。

方案二：存在文件服务器或者数据库里，会导致大量的 IO 操作，效率低。

方案三：Session 复制，该集群内的每个节点都存在一份相同的 Session，Session 数据冗余，节点越多浪费越大。

方案四：存储 Redis 中，将 Session 数据存在内存中，每台服务器都从内存中读取数据，速度快，结构还相对简单。



**流程概述**

客户端发送一个请求，然后到服务器，原来没有缓存数据库，要通过服务器访问数据库服务器，查询登录是否成功。现在有缓存服务器，服务器就可以先从缓存服务器中查有没有该用户的的信息，如果有，就不再从数据库之中查了。如果缓存服务器没有，查数据库之后先把它放在缓存数据库中再返回给浏览器。







## 4. 解决 IO 压力 

![image.png](../../imgs/1576400701766-8286a202-b6d6-439c-859c-b5548aa4b043.png)  

将获取的数据存到 Redis 中，客户端的请求先打到缓存中获取对应的数据，如果能获取到，直接返回，不需要从MySQL 中读取。如果缓存中没有，再从 MySQL 数据库中读取数据，将读取的数据返回并存一份到Redis中，方便下次读取。



使用 Redis 数据库，打破了传统关系型数据库以业务逻辑为依据的存储模式，而针对不同数据结构类型改为以性能为最优先的存储方式。



扩展: 对于持久化的数据库来说，单个库单个表存在性能瓶颈，因此会通过水平切分、垂直切分、读取分离等技术提升性能，此种解决方案会破坏一定的业务逻辑，但是可以换取更高的性能.







## 5. NoSQL 概述

**什么是 NoSQL？**

NoSQL 指的是非关系型数据库，不依赖业务逻辑方式存储，而以简单的 key-value 模式存储。因此大大增加了数据库的扩展能力。



**NoSQL 的特点**

不遵循 SQL 标准，不支持 ACID，远超于 SQL 的性能。



**NoSQL** **的使用场景**

对数据高并发的读写，海量数据的读写，对数据高可扩展性



**NoSQL 的不适用场景**

需要事务支持，基于 sql 的结构化查询存储，处理复杂的关系，需要级联查询



**建议**

用不着 sql 和 用了 sql 也不行可以考虑用 NoSQL。







## 6. 常用的缓存数据库

1. Memcached



![image.png](../../imgs/1576401235621-d057a149-d441-4769-9b3f-b047bf799623.png)



1. Redis

![image.png](../../imgs/1576401259957-dc1ea9d9-8292-45ff-99e1-580460967674.png)







## 7. 常用的非关系型数据库

- 列模型：存储的数据是一列列的。关系型数据库以一行作为一个记录，列模型数据库以一列为一个记录。（这种模型，数据即索引，IO很快，主要是一些分布式数据库），比如 Hbase



- 键值对模型：存储的数据是一个个“键值对”，比如name:liming,那么name这个键里面存的值就是liming，常用的有 redis,MemcacheDB



- 文档类模型：以一个个文档来存储数据，有点类似“键值对”。常用的有 mongoDB